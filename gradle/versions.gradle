def versions = [:]
versions.support = "1.1.0"
versions.multidex = "2.0.0"
versions.lifecycle = "2.2.0-rc03"
versions.navigation = "2.2.0"
versions.paging = "2.1.0"
versions.room = "2.2.3"
versions.work = "2.2.0"
versions.viewpager2 = "1.0.0"

versions.dagger = "2.16"
versions.junit = "4.12"
versions.espresso = "3.1.0-alpha4"
versions.retrofit = "2.7.0"
versions.okhttp_logging_interceptor = "3.9.0"
versions.mockwebserver = "3.8.1"
versions.apache_commons = "2.5"
versions.mockito = "2.7.19"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.22.0"
versions.dexmaker = "2.2.0"
versions.constraint_layout = "2.0.0-beta8"
versions.transition = "1.3.1"
versions.glide = "4.8.0"
versions.timber = "4.5.1"
versions.android_gradle_plugin = '4.0.1'
versions.rxjava2 = "2.1.3"
versions.rx_android = "2.0.1"
versions.atsl_runner = "1.1.0-alpha4"
versions.atsl_rules = "1.1.0-alpha4"
versions.hamcrest = "1.3"
versions.kotlin = '1.3.61'
versions.kotlinanko = "0.10.8"

versions.gcm = "11.0.1"
versions.jaredrummlerVersion = "1.0.8"
versions.leakcanary = "2.0-beta-5"
versions.okhttp = "3.12.0"
versions.okio = "1.13.0"
versions.rebound = "0.3.8"
versions.epoxy = "4.1.0"
versions.lottie = "3.4.0"
versions.mvrx = "1.1.0"
versions.paris = "1.3.0"
versions.kotlinpoet = "0.7.0"
versions.javapoet = "1.11.1"
versions.nimlib = "7.5.0"
versions.exoplayer = "2.9.3"
versions.faceunity = "6.4.0-lite"

versions.koin = "2.0.1"
versions.danmaku = "0.9.25"

versions.tinker = "1.9.14.10"
versions.tinker_plugin = "1.9.14.10.1"
versions.walle = "1.1.6"
versions.matrix = "0.6.6"

def deps = [:]

def support = [:]
support.app_compat = "androidx.appcompat:appcompat:$versions.support"
support.annotations = "androidx.annotation:annotation:$versions.support"
support.animation = "androidx.dynamicanimation:dynamicanimation:1.0.0"
support.exifinterface = "androidx.exifinterface:exifinterface:$versions.support"
support.recyclerview = "androidx.recyclerview:recyclerview:$versions.support"
support.cardview = "androidx.cardview:cardview:1.0.0"
support.design = "com.google.android.material:material:$versions.support"
support.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
support.v4 = "androidx.legacy:legacy-support-v4:1.0.0"
support.core_utils = "androidx.legacy:legacy-support-core-utils:1.0.0"
support.multidex = "androidx.multidex:multidex:2.0.1"
support.viewpager2 = "androidx.viewpager2:viewpager2:1.0.0"
deps.support = support

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.runtime_ktx = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

def paging = [:]
paging.runtime = "androidx.paging:paging-runtime-ktx:$versions.paging"
paging.rxjava2 = "androidx.paging:paging-rxjava2-ktx:$versions.paging"
deps.paging = paging

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
retrofit.adapter = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
deps.retrofit = retrofit

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def atsl = [:]
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_runner"
deps.atsl = atsl

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.reflect = "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
kotlin.anko = "org.jetbrains.anko:anko-commons:$versions.kotlinanko"
kotlin.ankodesign = "org.jetbrains.anko:anko-design:$versions.kotlinanko"
kotlin.coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"
deps.kotlin = kotlin

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.target_sdk = 28
build_versions.build_tools = "29.0.2"
ext.build_versions = build_versions

def work = [:]
work.runtime = "androidx.work:work-runtime-ktx:$versions.work"
work.rxjava2 = "android.arch.work:work-rxjava2:$versions.work"
deps.work = work

def navigation = [:]
//kotlin
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
//apply plugin: "androidx.navigation.safeargs.kotlin"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

def leakcanary = [:]
leakcanary.debug = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"
deps.leakcanary = leakcanary

def airbnb = [:]
airbnb.epoxy = "com.airbnb.android:epoxy:$versions.epoxy"
airbnb.epoxy_processor = "com.airbnb.android:epoxy-processor:$versions.epoxy"
airbnb.epoxy_paging = "com.airbnb.android:epoxy-paging:$versions.epoxy"
airbnb.epoxy_annotations = "com.airbnb.android:epoxy-annotations:$versions.epoxy"
airbnb.epoxy_databinding = "com.airbnb.android:epoxy-databinding:$versions.epoxy"
airbnb.lottie = "com.airbnb.android:lottie:$versions.lottie"
airbnb.paris = "com.airbnb.android:paris:$versions.paris"
airbnb.mvrx = "com.airbnb.android:mvrx:$versions.mvrx"
airbnb.paris_processor = "com.airbnb.android:paris-processor:$versions.paris"
deps.airbnb = airbnb

def nimlib = [:]
nimlib.base = "com.netease.nimlib:basesdk:$versions.nimlib"
nimlib.lucene = "com.netease.nimlib:lucene:$versions.nimlib"
nimlib.push = "com.netease.nimlib:push:$versions.nimlib"
nimlib.nrtc = "com.netease.nimlib:nrtc:$versions.nimlib"
deps.nimlib = nimlib

def exoplayer = [:]
exoplayer.core = "com.google.android.exoplayer:exoplayer-core:$versions.exoplayer"
exoplayer.ui = "com.google.android.exoplayer:exoplayer-ui:$versions.exoplayer"
deps.exoplayer = exoplayer

def umeng = [:]
umeng.common = "com.umeng.umsdk:common:2.0.0"
umeng.analytics = "com.umeng.umsdk:analytics:8.0.0"
deps.umeng = umeng

def ali = [:]
ali.player = 'com.aliyun.sdk.android:AliyunPlayer:4.7.4-full'
ali.conan = 'com.alivc.conan:AlivcConan:0.9.5'
deps.ali = ali

def bugly = [:]
bugly.crashreport_upgrade = "com.tencent.bugly:crashreport_upgrade:latest.release"
bugly.bugly_native = "com.tencent.bugly:nativecrashreport:latest.release"
bugly.tinker_support = "com.tencent.bugly:tinker-support:1.2.1"
deps.bugly = bugly

def matrix = [:]
matrix.commons = "com.tencent.matrix:matrix-commons:$versions.matrix"
matrix.android_lib = "com.tencent.matrix:matrix-android-lib:$versions.matrix"
matrix.android_commons = "com.tencent.matrix:matrix-android-commons:$versions.matrix"
matrix.trace_canary = "com.tencent.matrix:matrix-trace-canary:$versions.matrix"
matrix.resource_canary_android = "com.tencent.matrix:matrix-resource-canary-android:$versions.matrix"
matrix.resource_canary_common = "com.tencent.matrix:matrix-resource-canary-common:$versions.matrix"
matrix.io_canary = "com.tencent.matrix:matrix-io-canary:$versions.matrix"
matrix.sqlite_lint_android_sdk = "com.tencent.matrix:matrix-sqlite-lint-android-sdk:$versions.matrix"
matrix.sqlite_lint_android_sdk_no_op = "com.tencent.matrix:matrix-sqlite-lint-android-sdk-no-op:$versions.matrix"
matrix.apk_canary = "com.tencent.matrix:apk-canary:$versions.matrix"
deps.matrix = matrix

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
deps.transition = "androidx.transition:transition:$versions.transition"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.junit = "junit:junit:$versions.junit"
deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"
deps.gms = "com.google.android.gms:play-services-gcm:$versions.gcm"
deps.processes = "com.jaredrummler:android-processes:$versions.jaredrummlerVersion"
deps.okhttp = "com.squareup.okhttp3:okhttp:$versions.okhttp"
deps.okio = "com.squareup.okio:okio:$versions.okio"
deps.rebound = "com.facebook.rebound:rebound:$versions.rebound"

deps.javapoet = "com.squareup:javapoet:$versions.javapoet"
deps.kotlinpoet = "com.squareup:javapoet:$versions.kotlinpoet"

deps.koin = "org.koin:koin-android:$versions.koin"
deps.faceunity = "com.faceunity:nama:$versions.faceunity"
deps.danmaku = "com.github.ctiao:DanmakuFlameMaster:$versions.danmaku"
deps.walle = "com.meituan.android.walle:library:$versions.walle"
deps.tinker = "com.tencent.tinker:tinker-android-lib:$versions.tinker"
deps.tinker_anno = "com.tencent.tinker:tinker-android-anno:$versions.tinker"
deps.tinker_anno_support = "com.tencent.tinker:tinker-android-anno-support:$versions.tinker"
deps.tinker_plugin = "com.tencent.tinker:tinker-patch-gradle-plugin:$versions.tinker_plugin"
deps.zxing = "com.google.zxing:core:3.4.0"
deps.panel = "com.effective.android:panelSwitchHelper-androidx:1.3.12"
deps.mqtt = "org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5"

deps.refresh_layout = "com.scwang.smart:refresh-layout-kernel:2.0.0"
deps.refresh_header = "com.scwang.smart:refresh-header-classics:2.0.0"


ext.deps = deps
apply from: rootProject.file('gradle/utils.gradle')

def addRepos(RepositoryHandler handler) {
//    if (getBooleanProperty("IS_JENKINS")) {
//        handler.maven { url 'http://172.30.0.2:8081/repository/maven-public/' }
//    } else {
//        handler.maven { url 'http://192.168.10.139:28081/repository/maven-public/' }
//    }
    handler.maven { url 'https://maven.aliyun.com/repository/public' }
    handler.maven { url 'https://maven.aliyun.com/repository/google' }
    handler.maven { url "http://download.flutter.io" }
    handler.maven { url 'https://dl.bintray.com/umsdk/release' }
    handler.maven { url 'http://storage.googleapis.com/r8-releases/raw' }
}

ext.addRepos = this.&addRepos
